# Set another default user than root for security reasons
user       nobody www-data;

# As a thumb rule: One per CPU. If you are serving a large amount
# of static files, which requires blocking disk reads, you may want
# to increase this from the number of cpu_cores available on your
# system.
#
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes 1;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections
#worker_rlimit_nofile 8192;

	worker_rlimit_nofile 1532;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing
  # your OS, and this is probably the point at where you hire people
  # who are smarter than you, this is *a lot* of requests.
  #worker_connections  8000;
  
  worker_connections  1024;
  
}

# Change these paths to somewhere that suits you!
error_log  logs/error.log;
pid        logs/nginx.pid;

http {

	# Hide nginx version information.
  	server_tokens off;
  	
  # Set the mime-types via the mime.types external file
  #include       nginx-mime.types;
  
  	include		mime.types;

  # And the fallback mime-type
  #default_type  application/octet-stream;
  #default_type application/x-www-form-urlencoded;
  	
  	default_type 	text/html;
  	
  # Format for our log files
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

  # Click tracking!
  access_log   logs/access.log  main;

  # ~2 seconds is often enough for HTML/CSS, but connections in
  # Nginx are cheap, so generally it's safe to increase it
  keepalive_timeout 20;

  # You usually want to serve static files with Nginx
  sendfile on;

  tcp_nopush on; # off may be better for Comet/long-poll stuff
  tcp_nodelay off; # on may be better for Comet/long-poll stuff

  # Enable Gzip:
  gzip on;
  gzip_http_version 1.0;
  gzip_comp_level 5;
  gzip_min_length 512;
  gzip_buffers 4 8k;
  gzip_proxied any;
  gzip_types
  # text/html is always compressed by HttpGzipModule
  text/css
  text/javascript
  text/xml
  text/plain
  text/x-component
  application/javascript
  application/x-javascript
  application/json
  application/xml
  application/rss+xml
  font/truetype
  font/opentype
  application/vnd.ms-fontobject
  image/svg+xml;

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It would be better to enable this in a location {} block for
  # a specific directory:
  # gzip_static on;

  gzip_disable        "MSIE [1-6]\.";
  gzip_vary           on;
  
  #lua_socket_read_timeout 120s;
  
  # powered by the nginx's redis native driver
	upstream redis_citalis {

		server 127.0.0.1:6379;
   	# a pool with at most 1024 connections
   	# and do not distinguish the servers:
   	keepalive 1024;

	}
	
	# powered by the nginx's postgresql native driver as the most reliable one available
	upstream citalis {

		postgres_server 127.0.0.1 dbname=citalis user=pierre password=oscar;
		postgres_keepalive max=20 mode=single overflow=ignore;

	}
	
	# nginx's mysql native driver (uninstalled to feet agentzh's recommandation 
	# to use the more effiscient openresty's bundeled mysql lua module instead).
	# upstream citalis_mysql {
	#		drizzle_server 127.0.0.1:3306 dbname=citalis password=oscar user=pierre protocol=mysql;
	# }

  server {
  
		listen 80 default_server deferred; # for Linux
		# listen 80 default_server accept_filter=httpready; # for FreeBSD
		#listen 80 default_server;
		
		# WAF : top # 
		# https://www.howtoforge.com/nginx-how-to-block-exploits-sql-injections-file-injections-spam-user-agents-etc
		
 		## Block SQL injections
    set $block_sql_injections 0;
    if ($query_string ~ "union.*select.*\(") {
        set $block_sql_injections 1;
    }
    if ($query_string ~ "union.*all.*select.*") {
        set $block_sql_injections 1;
    }
    if ($query_string ~ "concat.*\(") {
        set $block_sql_injections 1;
    }
    if ($block_sql_injections = 1) {
        return 403;
    }

    ## Block file injections
    set $block_file_injections 0;
    if ($query_string ~ "[a-zA-Z0-9_]=http://") {
        set $block_file_injections 1;
    }
    if ($query_string ~ "[a-zA-Z0-9_]=(\.\.//?)+") {
        set $block_file_injections 1;
    }
    if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") {
        set $block_file_injections 1;
    }
    if ($block_file_injections = 1) {
        return 403;
    }

    ## Block common exploits
    set $block_common_exploits 0;
    if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "proc/self/environ") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
        set $block_common_exploits 1;
    }
    if ($query_string ~ "base64_(en|de)code\(.*\)") {
        set $block_common_exploits 1;
    }
    if ($block_common_exploits = 1) {
        return 403;
    }

    ## Block spam
    set $block_spam 0;
    if ($query_string ~ "\b(ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)\b") {
        set $block_spam 1;
    }
    if ($query_string ~ "\b(erections|hoodia|huronriveracres|impotence|levitra|libido)\b") {
        set $block_spam 1;
    }
    if ($query_string ~ "\b(ambien|blue\spill|cialis|cocaine|ejaculation|erectile)\b") {
        set $block_spam 1;
    }
    if ($query_string ~ "\b(lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby)\b") {
        set $block_spam 1;
    }
    if ($block_spam = 1) {
        return 403;
    }

    ## Block user agents
    set $block_user_agents 0;

    # Don't disable wget if you need it to run cron jobs!
    #if ($http_user_agent ~ "Wget") {
    #    set $block_user_agents 1;
    #}

    # Disable Akeeba Remote Control 2.5 and earlier
    if ($http_user_agent ~ "Indy Library") {
        set $block_user_agents 1;
    }

    # Common bandwidth hoggers and hacking tools.
    if ($http_user_agent ~ "libwww-perl") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "GetRight") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "GetWeb!") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "Go!Zilla") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "Download Demon") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "Go-Ahead-Got-It") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "TurnitinBot") {
        set $block_user_agents 1;
    }
    if ($http_user_agent ~ "GrabNet") {
        set $block_user_agents 1;
    }

    if ($block_user_agents = 1) {
        return 403;
    }
		
		# https://www.howtoforge.com/nginx-how-to-block-exploits-sql-injections-file-injections-spam-user-agents-etc
		# WAF : bot #
		
		listen 	[::]:80 default_server ipv6only=on;

		# e.g. "localhost" to accept all connections, or "www.example.com"
		# to handle the requests for "example.com" (and www.example.com)
		# server_name www.example.com;
	
		server_name 	localhost;

		# Path for static files
		# root /sites/example.com/public;
	
		root 	/var/www/html5up-parallelism;
		index 	index.html

		#Specify a charset
		charset utf-8;
	
		# fast cgi support
		include fcgiwrap.conf;
	
		# openresty/db driven apps
		include nginx_citalis.conf;
		
		# openresty/redis driven apps
		include redis_test.conf;
		
		# openresty/tarantool driven apps
		#include nginx_tnt_citalis.conf;
		
		# lc application server lua API
		include nginx_lcsrv.conf;
		
		# lua modules driven databases gateways
		# include postgresql.conf;	# example conf file
		# include mysql.conf; 			# example conf file
		
		# testing tasks desk
	  # include tests_divers.conf;

		# Custom 404 page
		error_page 404 /404.html;
	
		error_page 403 /404.html; # intox

		# No default expire rule. This config mirrors that of apache as outlined in the
		# html5-boilerplate .htaccess file. However, nginx applies rules by location, the apache rules
		# are defined by type. A concequence of this difference is that if you use no file extension in
		# the url and serve html, with apache you get an expire time of 0s, with nginx you'd get an
		# expire header of one month in the future (if the default expire rule is 1 month).
		# Therefore, do not use a default expire rule with nginx unless your site is completely static
		
		location /citalis2 {
		  include /etc/nginx/uwsgi_params;
		  uwsgi_param UWSGI_SCRIPT uwsgi.lua;
		  uwsgi_pass localhost:9000;
		  #uwsgi_pass unix:/var/sockets/$domain/socket;
		}

		# cache.appcache, your document html and data
		location ~* \.(?:manifest|appcache|html|xml|json)$ {
			expires -1;
			access_log logs/static.log;
		}

		# Feed
		location ~* \.(?:rss|atom)$ {
			expires 1h;
			add_header Cache-Control "public";
		}

		# Favicon
		location ~* \.ico$ {
			expires 1w;
			access_log off;
			add_header Cache-Control "public";
		}

		# Media: images, video, audio, HTC, WebFonts
		location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|eot|mp4|ogg|ogv|webm)$ {
			expires 1M;
			access_log off;
			add_header Cache-Control "public";
		}

		# CSS and Javascript
		location ~* \.(?:css|js)$ {
			expires 1y;
			access_log off;
			add_header Cache-Control "public";
		}
		
		location /info {
			allow 127.0.0.1; deny all;
			content_by_lua '
					local info = require "resty.info"
					info()
			';
		}

		# opt-in to the future
		add_header "X-UA-Compatible" "IE=Edge,chrome=1";
	
		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		location ~ /\.ht {
			  deny  all;
		}
  }
  
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
  
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    
    
    #include resty-cart.conf;				# 400 pps
    #include quickcms.conf;					# 550 pps
    #include quickcart.conf;					# 400 pps
    
    #include triangle.conf;
    #include gentelella.conf;
    #include adminLTE.conf;
   
    #include subrion.conf;					#  40 pps
    #include cscart_ultimate.conf; 	#  12 pps
    #include zeuscart.conf;					#  12 pps
    #include loaded7commerce.conf;	#  10 pps
  
}
